/**
 * @author Josh Eggett
 * @course CS1420
 * @assignment Assignment 4
 * @date September 25, 2023
 */
package assign04;

import java.util.Arrays;
import java.util.Scanner;

public class MethodPractice {

    /**
     * converts kilometers to miles.
     * @param kilometers - input kilometers to get miles from
     * @return miles - the number of miles from kilometers
     */
    public static int kilometersToMiles(double kilometers) {
        int miles = (int) (kilometers * 0.62137);
        return miles;
    }

    /**
     * takes an input exponent and returns the value that 2^exponent would be.
     * Ex: exponent = 4: 2^4 = 16, returns 16.
     * @param exponent - the 2^x - the power
     * @return 2^x -> returns the integer value of 2^x.
     */
    public static int powerOfTwo(int exponent) {
        int twoToX = 1;
        for (int i = 0; i < exponent; i++) {
            twoToX *=2;
        }
        return twoToX;
    }

    /**
     * Shifts a string with Cipher encryption by a specified amount.
     * @param message - the string to shift
     * @param shiftAmount - how much each character should shift by
     * @return modifiedMessage - the shifted string.
     */
    public static String shiftCipher(String message, int shiftAmount) {
        String shiftedString = "";

        char currentChar;
        for (int i = 0; i < message.length(); i++) {
            currentChar = message.charAt(i);
            if (currentChar + shiftAmount <= 126 && currentChar + shiftAmount >= 32) {
                currentChar += shiftAmount;
                shiftedString = shiftedString + currentChar;

            } else if (currentChar + shiftAmount > 126) {

                currentChar = (char) (32 +(currentChar + shiftAmount - 127) ) ;
                shiftedString = shiftedString + currentChar;
            }
        }
        return shiftedString;
    }

    /**
     * Counts the integer zero values from the provided scanner object.
     * @param scanner the scanner object to ge the zero values from
     * @return integer numOfZeros - how many integer zeros there are
     */
    public static int countIntegerZeros(Scanner scanner) {
        int numZeros = 0;
        while (scanner.hasNext()) {
            if (scanner.hasNextInt()) {
                if (scanner.nextInt() == 0) {
                    numZeros++;
                }
            } else {
                scanner.next();
            }
        }
        return numZeros;
    }

    /**
     * Takes the average of an integer array over a specified range.
     * @param array - the array from which to average from
     * @param beginning - the beginning value of the range to average
     * @param ending - the end value of the range to average
     * @return returns the average of the specified range
     */
    public static double averageInRange(int[] array, int beginning, int ending) {
        double average = 0.0;

        if (!(beginning < 0 || ending >= array.length)) {

            double sum = 0;
            int totalLength = 0;
            for (int i = beginning; i <= ending; i++) {
                sum += array[i];
                totalLength++;
            }
            if (totalLength== 0) {
                return 0.0;
            }
            System.out.println(totalLength);
            average = sum / totalLength;
        }
        return average;
    }

    /**
     * Creates an array and initializes every value to its index
     * Ex: [0, 1, 2, ...]
     * @param length - the length of the array to make
     * @return array - the array generated by the method is returned
     */
    public static int[] generateArray(int length) {
        int[] array = new int[length];
        for (int i = 0; i < array.length; i++) {
            array[i] = i;
        }
        return array;
    }

    /**
     * Converts a binary string to the decimal value as an integer.
     * @param binary - The binary to convert to an integer, provided as a string
     * @return decimal - the decimal value of the binary
     */
    public static int binaryToDecimal(String binary) {
       // initialize return value
        int decimal = 0;

        int startingPower = binary.length() - 1; // get the power to start at.
        int currentPower = startingPower;
        // loop through string
        for (int i = 0; i < binary.length(); i++) {
            int currentValue = binary.charAt(i); // character will be a 1 (value 49) or 0 (value 48) -> to fix just subtract 48
            currentValue -= 48;
            decimal += currentValue * powerOfTwo(currentPower);
            currentPower--;
        }
        return decimal;
    }


    public static void main(String[] args) {
        System.out.println("Checking powerOfTwo(10). Expecting a result of 1024. The actual result is "
                + powerOfTwo(10) + ".");

        System.out.println("Checking shiftCipher(\"(Zest!)\", 15). Expecting a result of 7it$08. The actual result is "
                + shiftCipher("(Zest!)", 15));

        System.out.println("Checking countIntegerZeros(new Scanner(\"hello 0 10 0.0 string0 0\"). Expecting a result of 2. The actual result is "
                + countIntegerZeros(new Scanner("hello 0 10 0.0 string0 0")) + ".");

        System.out.println("Checking generateArray(5). Expecting a result of [0, 1, 2, 3, 4]. The actual result is "
                + Arrays.toString(generateArray(5)) + ".");

        System.out.println("Checking kilometersToMiles(15). Expecting a result of 9. The actual result is " + kilometersToMiles(15) +".");

        int[] array = new int[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11};
        System.out.println("Checking averageInRange(array, 0, 7). Expecting a result of 3.5. The actual result is "
                + averageInRange(array, 0, 7));

        System.out.println("Checking binaryToDecimal(\"10001\"). Expecting a result of 17. The actual result is "
                + binaryToDecimal("10001"));
    }
}
